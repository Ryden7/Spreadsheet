<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formula</name>
    </assembly>
    <members>
        <member name="T:Formulas.Formula">
            <summary>
            Represents formulas written in standard infix notation using standard precedence
            rules.  Provides a means to evaluate Formulas.  Formulas can be composed of
            non-negative floating-point numbers, variables, left and right parentheses, and
            the four binary operator symbols +, -, *, and /.  (The unary operators + and -
            are not allowed.)
            </summary>
        </member>
        <member name="M:Formulas.Formula.#ctor(System.String)">
            <summary>
            Creates a Formula from a string that consists of a standard infix expression composed
            from non-negative floating-point numbers (using C#-like syntax for double/int literals), 
            variable symbols (a letter followed by zero or more letters and/or digits), left and right
            parentheses, and the four binary operator symbols +, -, *, and /.  White space is
            permitted between tokens, but is not required.
            
            Examples of a valid parameter to this constructor are:
                "2.5e9 + x5 / 17"
                "(5 * 2) + 8"
                "x*y-2+35/9"
                
            Examples of invalid parameters are:
                "_"
                "-5.3"
                "2 5 + 3"
            
            If the formula is syntacticaly invalid, throws a FormulaFormatException with an 
            explanatory Message.
            </summary>
        </member>
        <member name="M:Formulas.Formula.#ctor(System.String,Formulas.Normalizer,Formulas.Validator)">
            <summary>
            
            </summary>
            <param name="formula"></param>
            <param name="norm"></param>
            <param name="val"></param>
        </member>
        <member name="M:Formulas.Formula.Evaluate(Formulas.Lookup)">
            <summary>
            Evaluates this Formula, using the Lookup delegate to determine the values of variables.  (The
            delegate takes a variable name as a parameter and returns its value (if it has one) or throws
            an UndefinedVariableException (otherwise).  Uses the standard precedence rules when doing the evaluation.
            
            If no undefined variables or divisions by zero are encountered when evaluating 
            this Formula, its value is returned.  Otherwise, throws a FormulaEvaluationException  
            with an explanatory Message.
            </summary>
        </member>
        <member name="M:Formulas.Formula.GetTokens(System.String)">
            <summary>
            Given a formula, enumerates the tokens that compose it.  Tokens are left paren,
            right paren, one of the four operator symbols, a string consisting of a letter followed by
            zero or more digits and/or letters, a double literal, and anything that doesn't
            match one of those patterns.  There are no empty tokens, and no token contains white space.
            </summary>
        </member>
        <member name="M:Formulas.Formula.rule1(System.String,System.Double)">
            <summary>
            Helper method to enforce rule 1
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="M:Formulas.Formula.rule2(System.String)">
            <summary>
            Helper method to enforce rule 2
            </summary>
            <param name="formula"></param>
        </member>
        <member name="M:Formulas.Formula.rule3(System.String)">
            <summary>
            Helper method to enforce rule 3
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Formulas.Formula.rule4">
            <summary>
            Helper method to enforce rule 4
            </summary>
        </member>
        <member name="M:Formulas.Formula.rule7(System.String,System.Double)">
            <summary>
            Helper method to enforce rule 7
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="M:Formulas.Formula.rule8(System.String)">
            <summary>
            Helper method to enforce rule 8
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Formulas.Formula.GetVariables">
            <summary>
            Returns the variables of a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Formulas.Formula.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Formulas.Lookup">
            <summary>
            A Lookup method is one that maps some strings to double values.  Given a string,
            such a function can either return a double (meaning that the string maps to the
            double) or throw an UndefinedVariableException (meaning that the string is unmapped 
            to a value. Exactly how a Lookup method decides which strings map to doubles and which
            don't is up to the implementation of the method.
            </summary>
        </member>
        <member name="T:Formulas.Normalizer">
            <summary>
            Normalizer delegate
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Formulas.Validator">
            <summary>
            Validator delegate
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Formulas.UndefinedVariableException">
            <summary>
            Used to report that a Lookup delegate is unable to determine the value
            of a variable.
            </summary>
        </member>
        <member name="M:Formulas.UndefinedVariableException.#ctor(System.String)">
            <summary>
            Constructs an UndefinedVariableException containing whose message is the
            undefined variable.
            </summary>
            <param name="variable"></param>
        </member>
        <member name="T:Formulas.FormulaFormatException">
            <summary>
            Used to report syntactic errors in the parameter to the Formula constructor.
            </summary>
        </member>
        <member name="M:Formulas.FormulaFormatException.#ctor(System.String)">
            <summary>
            Constructs a FormulaFormatException containing the explanatory message.
            </summary>
        </member>
        <member name="T:Formulas.FormulaEvaluationException">
            <summary>
            Used to report errors that occur when evaluating a Formula.
            </summary>
        </member>
        <member name="M:Formulas.FormulaEvaluationException.#ctor(System.String)">
            <summary>
            Constructs a FormulaEvaluationException containing the explanatory message.
            </summary>
        </member>
    </members>
</doc>
